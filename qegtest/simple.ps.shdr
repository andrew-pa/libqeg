$pixel_shader

input
{
	vec4 pos : rs_position;
	vec3 posW : position;
	vec3 normW : normal;
	vec2 texc : texcoord;
}

output
{
	vec4 color : target0;
}

//material
cbuffer(0)
{
	vec4 diffuse;
	vec4 specular;
}

struct point_light
{
	vec4 pos;
	vec4 col;
};

//lighting 
cbuffer(1)
{
	point_light[3] lights;
	uint light_count;
}

cbuffer(2)
{
	vec4 cam_pos;
}

texture2D tex(0);

void main()
{
	vec3 v = normalize(cam_pos.xyz - input.posW);
	vec3 n = normalize(input.normW);
	vec3 col = vec3(0.,0.,0.);
	for(int i = 0; i < light_count; i++)
	{
		vec3 l = normalize(lights[i].pos.xyz - input.posW);
		if(specular.w <= 0.)
		{
			col += diffuse.xyz * max(0.f, dot(n, l));
		}
		else
		{
			vec3 hv = normalize(l+v);
			float hdn = max(0., dot(hv, n));
			vec3 spc = (specular.xyz*lights[i].col.xyz) * pow(hdn, specular.w);
			vec3 dif = (diffuse.xyz*lights[i].col.xyz) * max(0., dot(n, l));
			col += dif + spc;
		}
	}

	float a = clamp(abs(sin(input.texc.x*8.)+cos(input.texc.y*8.)), .2, 1.);

	//if(.22 > a) discard();

	output.color = vec4(col * sample_texture(tex, input.texc).xyz, a);
}
