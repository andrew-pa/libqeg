$pixel_shader

input
{
	vec4 pos : rs_position;
	vec2 texc : texcoord;
}


output
{
	vec4 color : target0;
}

cbuffer(0)
{
	uvec4 options; //(Depth Texture), (Env Map), Unused, Unused)
}

texture2D tex(0);
textureCube envtex(1);

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float intersect(vec3 rayOrigin, vec3 rayDir, vec3 sphereCenter, float radius)
{
  float a = dot(rayDir, rayDir);
  float b = dot(rayOrigin - sphereCenter, rayDir);
  float c = dot(rayOrigin - sphereCenter, rayOrigin - sphereCenter) - radius*radius;
  
  float discr = b*b - a*c;
  if(discr < 0.0)
    return -1.0;
  
    discr = sqrt(discr);
    float t0 = (-b - discr) / a;
    float t1 = (-b + discr) / a;
  
	return min(t0, t1);
}

void main()
{
	vec2 texmul = vec2(1.);
#ifdef GLSL
	texmul.y = -1.;
#endif
	if(options.x > 0)
	{
		float depth = sample_texture(tex, input.texc*texmul).x;
		float x = pow(1. - (1. - depth) * 50., 2.4);
		output.color = vec4(hsv2rgb(vec3(.04, max(.1, 1-x), max(.1, x))), 1.);
	}
	else if(options.y > 0)
	{
		vec2 uv = (input.texc - vec2(.5))*vec2(-1., -1.);

		vec3 ro = vec3(0, 0, -5);
		vec3 ww = normalize(-ro);
		vec3 uu = normalize(cross(ww, vec3(0, 1., 0)));
		vec3 vv = normalize(cross(ww, uu));
		vec3 rd = normalize(uv.x*uu+uv.y*vv+ww);

		float t = intersect(ro, rd, vec3(0.), 2.);
		vec3 p = ro+rd*t;
		vec3 n = normalize(vec3(0.)-p);

		if(t > 0) output.color = sample_texture(envtex, vec3(-1.,texmul.y,-1.)*reflect(n, rd))*max(0.8, dot(n, vec3(0, 1., 0)));
		else output.color = vec4(.2);
	}
	else
	{
		output.color = sample_texture(tex, input.texc*texmul);
	}
}
